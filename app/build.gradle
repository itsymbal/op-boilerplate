buildscript {
    repositories {
        // repo for Fabric components, i.e. Crashlytics
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates which means can't use it offline
        // Fuck that I need to be able to work offline
//        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'kotlin-kapt'
//apply plugin: 'io.fabric'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

// for release to play store, add the following properties to keys.properties
// keys.properties is marked as 'unwatch'- lest you wants your passwords in the repo
//ext.key_alias="<your private key alias>"
//ext.key_password="<your private key password>"
//ext.store_file="<full path to your keystore file.jks>"
//ext.store_password="<your keystore password>"
//
//similarly you can create a top level gradle.properties file.
//  They are then accessible as member variables of the generated BuildConfig.class file
//  Use that file to store API keys, paths etc. An initial version of that file
//  is checked into git but subsequent changes are not tracked in git. This allows each project to customize those
//  properties without checking in secrets. File is set to watched / unwatched using aliases defined in ~/.gitconfig
// [alias]
// unwatch = update-index --assume-unchanged
// watch = update-index --no-assume-unchanged


apply from: "keys.properties"

rootProject.ext {
    minSdkVersion = 19
    compileSdkVersion = 25
    targetSdkVersion = 25
    javaVersion = JavaVersion.VERSION_1_8
    supportLibraryVersion = '25.4.0'
    assertJVersion = "1.1.1"
    autoValueMoshiVersion = "0.4.0"
    autoValueVersion = "1.2"
    daggerVersion = '2.6'
    gsonVersion = "2.7"
    retrofitVersion = "2.3.0"
}

android {
    signingConfigs {
        PlayStoreConfig {
            // values in keys.properties file - see comment above "apply from: "keys.properties""
            keyAlias key_alias
            keyPassword key_password
            storeFile file(store_file)
            storePassword store_password
        }
    }

    // share source and resources directories between unit test (test) and instrumentation (androidTest)
    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            String sharedResourceDir = 'src/sharedTest/resources'
            test {
                java.srcDir sharedTestDir
                resources.srcDirs sharedResourceDir
            }
            androidTest {
                java.srcDir sharedTestDir
                resources.srcDirs sharedResourceDir
            }
        }
    }

    compileOptions {
        sourceCompatibility "$javaVersion"
        targetCompatibility "$javaVersion"
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    //noinspection GradleDependency

    defaultConfig {
        applicationId "com.orangepenguin.boilerplate"
        minSdkVersion "$rootProject.ext.minSdkVersion"
        targetSdkVersion "$rootProject.ext.targetSdkVersion"
        versionCode 1
        versionName "1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // add test outputs as a source folder to Studio
        // for library projects use  android.libraryVariants.all
        android.applicationVariants.all {
            def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
            it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
        }
    }

    buildTypes {
        release {
            // TODO: figure out a way to upload de-obfuscation info to Crashlytics
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.PlayStoreConfig
        }
        debug {
            //TODO: temporarily disable proguard in debug mode till I can figure out why it breaks
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-test.pro'
            applicationIdSuffix ".debug"
        }
    }
    buildTypes.each {
        it.buildConfigField('String', 'GITHUB_URL', "\"" + "https://api.github.com" + "\"")
    }
    lintOptions {
        lintConfig file("lint.xml")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:design:$supportLibraryVersion"
    // Butterknife View injection
    implementation "com.jakewharton:butterknife:8.5.1"
//    annotationProcessor "com.jakewharton:butterknife-compiler:8.5.1"
    // Timber logging
    implementation "com.jakewharton.timber:timber:4.5.1"
    implementation "com.android.support.constraint:constraint-layout:1.0.2"

    // LeakCanary memory leak detector
    debugImplementation "com.squareup.leakcanary:leakcanary-android:1.5.1"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.5.1"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.5.1"

    // Retrofit network library and dependencies
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:3.8.0"

    // Picasso image library
    implementation "com.squareup.picasso:picasso:2.5.2"

    // Dagger dependency injection
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"

    // RxJava / RxAndroid
    implementation "io.reactivex:rxjava:1.3.0"
    implementation "io.reactivex:rxandroid:1.2.1"

    // AutoValue / Parcelable /  Moshi Json parser
    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    kapt "com.google.auto.value:auto-value:$autoValueVersion"
    kapt "com.ryanharter.auto.value:auto-value-parcel:0.2.4-rc2"
    kapt "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
    compileOnly "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"

    testImplementation("junit:junit:4.12")
    testImplementation "org.mockito:mockito-core:2.13.0"
    androidTestImplementation "org.mockito:mockito-android:2.13.0"

// MockWebServer and Plus
    testImplementation("com.orhanobut:mockwebserverplus:1.0.0")
    androidTestImplementation("com.orhanobut:mockwebserverplus:1.0.0") {
        exclude module: 'snakeyaml'
    }
    androidTestImplementation 'pl.droidsonroids.yaml:snakeyaml:1.18-android'

// AssertJ assertions
    testImplementation("com.squareup.assertj:assertj-android:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    testImplementation("com.squareup.assertj:assertj-android-support-v4:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    compileOnly "org.glassfish:javax.annotation:10.0-b28"

//Crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.4@aar') {
        transitive = true
    }

// Espresso
    androidTestImplementation("com.android.support.test:runner:1.0.1")
    androidTestImplementation("com.android.support.test.espresso:espresso-core:3.0.1")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
