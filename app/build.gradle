buildscript {
    repositories {
        // repo for Fabric components, i.e. Crashlytics
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates which means can't use it offline
        // Fuck that I need to be able to work offline
//        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://maven.fabric.io/public' }
}

// for release to play store, add the following properties to keys.properties
// keys.properties is marked as 'unwatch'- lest you wants your passwords in the repo
//ext.key_alias="<your private key alias>"
//ext.key_password="<your private key password>"
//ext.store_file="<full path to your keystore file.jks>"
//ext.store_password="<your keystore password>"

apply from: "keys.properties"

rootProject.ext {
    assertJVersion = "1.1.1"
    autoValueMoshiVersion = "0.4.0"
    autoValueParcelVersion = "0.2.4-rc2"
    autoValueVersion = "1.2"
    buildToolsVersion = '26.0.0-rc2'
    butterKnifeVersion = '8.5.1'
    compileSdkVersion = 25
    constraintLayoutVersion = '1.0.2'
    daggerVersion = '2.6'
    espressoVersion = '2.2.2'
    gsonVersion = "2.7"
    glassFishVersion = "10.0-b28"
    javaVersion = JavaVersion.VERSION_1_8
    junitVersion = '4.12'
    leakCanaryVersion = '1.4-beta2'
    minSdkVersion = 19
    mockitoVersion = '1.10.19'
    mockWebeserverPlusVersion = "1.0.0"
    okHttpVersion = "3.3.0"
    picassoVersion = "2.4.0"
    powerMockVersion = '1.6.4'
    retrofitVersion = "2.1.0"
    rxAndroidVersion = "1.2.1"
    rxJavaVersion = "1.1.4"
    saripaarVersion = "2.0.2"
    supportLibraryVersion = '25.3.1'
    targetSdkVersion = 25
    timberVersion = '4.5.1'
}

android {
    signingConfigs {
        PlayStoreConfig {
            // values in keys.properties file
            keyAlias key_alias
            keyPassword key_password
            storeFile file(store_file)
            storePassword store_password
        }
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDir sharedTestDir
            }
            androidTest {
                java.srcDir sharedTestDir
            }
        }
    }

    compileOptions {
        sourceCompatibility "$javaVersion"
        targetCompatibility "$javaVersion"
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    //noinspection GradleDependency
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.orangepenguin.boilerplate"
        minSdkVersion "$rootProject.ext.minSdkVersion"
        targetSdkVersion "$rootProject.ext.targetSdkVersion"
        versionCode 1
        versionName "1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // add test outputs as a source folder to Studio
        // for library projects use  android.libraryVariants.all
        android.applicationVariants.all {
            def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
            it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
        }
    }

    buildTypes {
        release {
            // TODO: figure out a way to upload de-obfuscation info to Crashlytics
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.PlayStoreConfig
        }
        debug {
//            minifyEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-test.pro'
            applicationIdSuffix ".debug"
        }
    }
    /**
     * TODO: update comment now that we have keys.properties
     * Properties referenced here are defined in the top level gradle.properties file.
     * They are then accessible as member variables of the generated BuildConfig.class file
     * Use that file to store API keys, paths etc. An initial version of that file
     * is checked into git but subsequent changes are not tracked in git. This allows each project to customize those
     * properties without checking in secrets. File is set to watched / unwatched using aliases defined in ~/.gitconfig
     [alias]
     unwatch = update-index --assume-unchanged
     watch = update-index --no-assume-unchanged
     */
    buildTypes.each {
        it.buildConfigField('String', 'GITHUB_URL', "\"" + "https://api.github.com" + "\"")
    }
    lintOptions {
        lintConfig file("lint.xml")
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:design:$supportLibraryVersion"
    // Butterknife View injection
    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    // Timber logging
    compile "com.jakewharton.timber:timber:$timberVersion"
    compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    // LeakCanary memory leak detector
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    debugCompile 'com.squareup.haha:haha:2.0.3'
    // fix build error http://stackoverflow.com/questions/36762834/getting-errors-on-building-in-android-studio-2
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Retrofit network library and dependencies
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Picasso image library
    compile "com.squareup.picasso:picasso:$picassoVersion"

    // the explicit inclusion of javapoet is a fix for a (hopefully) temporary issue:
    // https://github.com/rharter/auto-value-gson/issues/43
    // java.lang.NoSuchMethodError: com.squareup.javapoet.TypeName.isBoxedPrimitive()
    // caused by a library including an earlier javapoet. Try removing this later
    // keeping version local as this is a temporary solution
    // TODO: ^^
    annotationProcessor 'com.squareup:javapoet:1.8.0'

    // Dagger dependency injection
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    compile "com.google.dagger:dagger:$daggerVersion"

    // Saripaar input validation
    compile "com.mobsandgeeks:android-saripaar:$saripaarVersion"
    // RxJava / RxAndroid
    compile "io.reactivex:rxjava:$rxJavaVersion"
    compile "io.reactivex:rxandroid:$rxAndroidVersion"

    // AutoValue / Parcelable /  Moshi Json parser
    provided "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcelVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
    provided "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"

    testCompile("junit:junit:$junitVersion")
//            {
//        exclude group: 'org.hamcrest', module: 'hamcrest-core'
//    }
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    androidTestCompile "org.mockito:mockito-all:$mockitoVersion"
    // LeakCanary memory leak detector
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // PowerMock mocking framework
    testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
    testCompile ("org.powermock:powermock-api-mockito:$powerMockVersion")
//            {
//        exclude group: 'org.hamcrest', module: 'hamcrest-core'
//    }
    testCompile "org.powermock:powermock-classloading-xstream:$powerMockVersion"

    // MockWebServer and Plus
    testCompile("com.orhanobut:mockwebserverplus:$mockWebeserverPlusVersion")

    // AssertJ assertions
    testCompile("com.squareup.assertj:assertj-android:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    testCompile("com.squareup.assertj:assertj-android-support-v4:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    provided "org.glassfish:javax.annotation:$glassFishVersion"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.4@aar') {
        transitive = true
    }

    // Espresso
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}
