buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.trello.victor'

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://maven.fabric.io/public' }
}

rootProject.ext {
    // Sdk and tools
    minSdkVersion = 19
    targetSdkVersion = 23
    compileSdkVersion = 23
    buildToolsVersion = '23.0.3'
    javaVersion = JavaVersion.VERSION_1_8
    // App dependencies
    // version 24.0.0 causes exception
    // org.xmlpull.v1.XmlPullParserException: XML file
    // build/intermediates/res/merged/debug/drawable/abc_ic_ab_back_material.xml line #-1
    // (sorry, not yet implemented): invalid drawable tag vector
    // TODO: attempt to upgrade once Robolectric bug is fixed
//    supportLibraryVersion = '24.2.1'
    supportLibraryVersion = '23.4.0'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    butterKnifeVersion = '8.0.1'
    daggerVersion = '2.4'
    leakCanaryVersion = '1.4-beta2'
    timberVersion = '4.1.2'
    powerMockVersion = '1.6.4'
    constraintLayoutVersion = '1.0.0-alpha7'
    robolectricVersion = "3.1"
//    robolectricVersion = "3.2-SNAPSHOT"
    assertJVersion = "1.1.1"
    saripaarVersion = "2.0.2"
    rxJavaVersion = "1.1.4"
    rxAndroidVersion = "1.2.1"
    gsonVersion = "2.7"
    autoValueVersion = "1.2"
    autoValueMoshiVersion = "0.4.0"
    autoValueParcelVersion = "0.2.4-rc2"
    picassoVersion = "2.4.0"
    retrofitVersion = "2.1.0"
    okHttpVersion = "3.3.0"
    mockWebeserverPlusVersion = "0.8.2-SNAPSHOT"
    glassFishVersion = "10.0-b28"
}

android {
    compileOptions {
        sourceCompatibility "$javaVersion"
        targetCompatibility "$javaVersion"
    }

    // Trello Victor location of SVGs
    sourceSets {
        main {
            svg.srcDir 'src/main/svg'
        }
    }
    victor {
        // Any assets defined in relative terms needs a base DPI specified
        svgDpi = 72

        // Do not generate these densities for SVG assets
        excludeDensities = ['ldpi', 'xxxhdpi']
    }

    useLibrary 'org.apache.http.legacy' // for robolectric 3.0 compatibility issue

    compileSdkVersion rootProject.ext.compileSdkVersion
    //noinspection GradleDependency
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.orangepenguin.boilerplate"
        minSdkVersion "$rootProject.ext.minSdkVersion"
        targetSdkVersion "$rootProject.ext.targetSdkVersion"
        versionCode 1
        versionName "1.0"
    }

    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    'proguard-rules-debug.pro'
            applicationIdSuffix ".debug"
        }
    }
    /**
     * Properties referenced here are defined in the top level gradle.properties file.
     * They are then accessible as member variables of the generated BuildConfig.class file
     * Use that file to store API keys, paths etc. An initial version of that file
     * is checked into git but subsequent changes are not tracked in git. This allows each project to customize those
     * properties without checking in secrets. File is set to watched / unwatched using aliases defined in ~/.gitconfig
     [alias]
     unwatch = update-index --assume-unchanged
     watch = update-index --no-assume-unchanged
     */
    buildTypes.each {
        it.buildConfigField 'String', 'GITHUB_API_KEY', "\"" + GitHubApiKey + "\""
        it.buildConfigField 'String', 'GITHUB_URL', "\"" + "https://api.github.com" + "\""
    }
    lintOptions {
        lintConfig file("lint.xml")
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:design:$supportLibraryVersion"
    // Butterknife View injection
    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    apt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    // Timber logging
    compile "com.jakewharton.timber:timber:$timberVersion"
    compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    // LeakCanary memory leak detector
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    debugCompile 'com.squareup.haha:haha:2.0.3'
    // fix build error http://stackoverflow.com/questions/36762834/getting-errors-on-building-in-android-studio-2
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Retrofit network library and dependencies
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Picasso image library
    compile "com.squareup.picasso:picasso:$picassoVersion"

    // the explicit inclusion of javapoet is a fix for a (hopefully) temporary issue:
    // https://github.com/rharter/auto-value-gson/issues/43
    // java.lang.NoSuchMethodError: com.squareup.javapoet.TypeName.isBoxedPrimitive()
    // caused by a library including an earlier javapoet. Try removing this later
    // keeping version local as this is a temporary solution
    // TODO: ^^
    apt 'com.squareup:javapoet:1.7.0'

    // Dagger dependency injection
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    testApt "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestApt "com.google.dagger:dagger-compiler:$daggerVersion"
    compile "com.google.dagger:dagger:$daggerVersion"

    // Saripaar input validation
    compile "com.mobsandgeeks:android-saripaar:$saripaarVersion"
    // RxJava / RxAndroid
    compile "io.reactivex:rxjava:$rxJavaVersion"
    compile "io.reactivex:rxandroid:$rxAndroidVersion"

    // AutoValue / Parcelable /  Moshi Json parser
    provided "com.google.auto.value:auto-value:$autoValueVersion"
    apt "com.google.auto.value:auto-value:$autoValueVersion"
    apt "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcelVersion"
    apt "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
    provided "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    // LeakCanary memory leak detector
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // PowerMock mocking framework
    testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
    testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
    testCompile "org.powermock:powermock-classloading-xstream:$powerMockVersion"

    // Robolectric testing
    testCompile "org.robolectric:robolectric:$robolectricVersion"
    testCompile "org.robolectric:shadows-support-v4:$robolectricVersion"

    // MockWebServer and Plus
    testCompile("com.orhanobut:mockwebserverplus:$mockWebeserverPlusVersion") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
        exclude group: 'com.squareup.okio', module: 'okio'
    }

    // AssertJ assertions
    testCompile("com.squareup.assertj:assertj-android:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    testCompile("com.squareup.assertj:assertj-android-support-v4:$assertJVersion") {
        exclude group: 'com.android.support'
    }
    provided "org.glassfish:javax.annotation:$glassFishVersion"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.4@aar') {
        transitive = true;
    }

}
